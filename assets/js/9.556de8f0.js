(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{330:function(t,a,e){"use strict";e.r(a);var s=e(33),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"springboot配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot配置"}},[t._v("#")]),t._v(" springboot配置")]),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ===================================================================")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# COMMON SPRING BOOT PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This sample file is provided as a guideline. Do NOT copy it in its")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# entirety to your own application.\t\t\t   ^^^")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ===================================================================")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CORE PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("debug")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable debug logs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("trace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable trace logs.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LOGGING")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.exception-conversion-word")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("%wEx # Conversion word used when logging exceptions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.file.max-history")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum of archive log files to keep. Only supported with the default logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.file.max-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10MB # Maximum log file size. Only supported with the default logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.level.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the log file. For instance, `/var/log`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.pattern.console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Appender pattern for output to the console. Supported only with the default Logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.pattern.dateformat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("yyyy-MM-dd HH:mm:ss.SSS # Appender pattern for log date format. Supported only with the default Logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.pattern.file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Appender pattern for output to a file. Supported only with the default Logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.pattern.level")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("%5p # Appender pattern for log level. Supported only with the default Logback setup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("logging.register-shutdown-hook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Register a shutdown hook for the logging system when it is initialized.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.aop.auto")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Add @EnableAspectJAutoProxy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.aop.proxy-target-class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IDENTITY (ContextIdApplicationContextInitializer)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.application.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Application name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ADMIN (SpringApplicationAdminJmxAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.application.admin.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable admin features for the application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.application.admin.jmx-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AUTO-CONFIGURATION")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.autoconfigure.exclude")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Auto-configuration classes to exclude.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BANNER")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.charset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Banner file encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:banner.txt # Banner text resource location.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.image.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:banner.gif # Banner image file location (jpg or png can also be used).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.image.width")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("76 # Width of the banner image in chars.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.image.height")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Height of the banner image in chars (default based on image height).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.image.margin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Left hand image margin in chars.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.banner.image.invert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether images should be inverted for dark terminal themes.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING CORE")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.beaninfo.ignore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to skip search of BeanInfo classes.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING CACHE (CacheProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.cache-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of cache names to create if supported by the underlying cache manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.caffeine.spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The spec to use to create caches. See CaffeineSpec for more details on the spec format.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.couchbase.expiration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Entry expiration. By default the entries never expire. Note that this value is ultimately converted to seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.ehcache.config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The location of the configuration file to use to initialize EhCache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.infinispan.config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The location of the configuration file to use to initialize Infinispan.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.jcache.config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The location of the configuration file to use to initialize the cache manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.jcache.provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Needed only if more than one JSR-107 implementation is available on the classpath.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.redis.cache-null-values")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Allow caching null values.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.redis.key-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Key prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.redis.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Entry expiration. By default the entries never expire.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.redis.use-key-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to use the key prefix when writing to Redis.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.cache.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Cache type. By default, auto-detected according to the environment.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.config.additional-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Config file locations used in addition to the defaults.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.config.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Config file locations that replace the defaults.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.config.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("application # Config file name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HAZELCAST (HazelcastProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.hazelcast.config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The location of the configuration file to use to initialize Hazelcast.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PROJECT INFORMATION (ProjectInfoProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.info.build.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.info.git.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:git.properties # Location of the generated git.properties file.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JMX")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jmx.default-domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JMX domain name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jmx.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Expose management beans to the JMX domain.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jmx.server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("mbeanServer # MBeanServer bean name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Email (MailProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.default-encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Default MimeMessage encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SMTP server host. For instance, `smtp.example.com`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.jndi-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Session JNDI name. When set, takes precedence over other mail settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the SMTP server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SMTP server port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional JavaMail session properties.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("smtp # Protocol used by the SMTP server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.test-connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to test that the mail server is available on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mail.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the SMTP server.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# APPLICATION SETTINGS (SpringApplication)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.main.banner-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("console # Mode used to display the banner when the application runs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.main.sources")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.main.web-application-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# FILE ENCODING (FileEncodingApplicationListener)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mandatory-file-encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Expected character encoding the application must use.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# INTERNATIONALIZATION (MessageSourceProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.always-use-message-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to always apply the MessageFormat rules, parsing even messages without arguments.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.basename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("messages # Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.cache-duration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Message bundles encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.fallback-to-system-locale")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to fall back to the system Locale if no files for a specific Locale have been found.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.messages.use-code-as-default-message")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether to use the message code as the default message instead of throwing a "NoSuchMessageException". Recommended during development only.')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.output.ansi.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("detect # Configures the ANSI output.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PID FILE (ApplicationPidFileWriter)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.pid.fail-on-write-error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fails if ApplicationPidFileWriter is used but it cannot write the PID file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.pid.file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the PID file to write (if ApplicationPidFileWriter is used).")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PROFILES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.profiles.active")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of active profiles. Can be overridden by a command line switch.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.profiles.include")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# QUARTZ SCHEDULER (QuartzProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.quartz.jdbc.initialize-schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("embedded # Database schema initialization mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.quartz.jdbc.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.quartz.job-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("memory # Quartz job store type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.quartz.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional Quartz Scheduler properties.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# REACTOR (ReactorCoreProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.reactor.stacktrace-mode.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether Reactor should collect stacktrace information at runtime.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SENDGRID (SendGridAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.sendgrid.api-key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SendGrid API key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.sendgrid.proxy.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SendGrid proxy host.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.sendgrid.proxy.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SendGrid proxy port.")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# WEB PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# EMBEDDED SERVER CONFIGURATION (ServerProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.address")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Network address to which the server should bind.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.compression.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether response compression is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.compression.excluded-user-agents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# List of user-agents to exclude from compression.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.compression.mime-types")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("text/html,text/xml,text/plain,text/css,text/javascript,application/javascript # Comma-separated list of MIME types that should be compressed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.compression.min-response-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('2048 # Minimum "Content-Length" value that is required for compression to be performed.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.connection-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Time that connectors wait for another HTTP request before closing the connection. When not set, the connector's container-specific default is used. Use a value of -1 to indicate no (that is, an infinite) timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.error.include-exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Include the "exception" attribute.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.error.include-stacktrace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('never # When to include a "stacktrace" attribute.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.error.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/error # Path of the error controller.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.error.whitelabel.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the default error page displayed in browsers in case of a server error.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.http2.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable HTTP/2 support, if the current environment supports it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.acceptors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of acceptor threads to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.append")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Append to log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("dd/MMM/yyyy:HH:mm:ss Z # Timestamp format of the request log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable access log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.extended-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable extended NCSA format.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.file-date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Date format to place in log file name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Log filename. If not specified, logs redirect to "System.err".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.locale")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Locale of the request log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.log-cookies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable logging of the request cookies.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.log-latency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable logging of request processing time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.log-server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable logging of the request hostname.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.retention-period")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("31 # Number of days before rotated log files are deleted.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.accesslog.time-zone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("GMT # Timezone of the request log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.max-http-post-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size, in bytes, of the HTTP post or put content.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.jetty.selectors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of selector threads to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.max-http-header-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size, in bytes, of the HTTP message header.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8080 # Server HTTP port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.server-header")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Value to use for the Server response header (if empty, no header is sent).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.use-forward-headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether X-Forwarded-* headers should be applied to the HttpRequest.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.context-parameters.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Servlet context init parameters.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.context-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Context path of the application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.application-display-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("application # Display name of the application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.jsp.class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.jsp.init-parameters.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Init parameters used to configure the JSP servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.jsp.registered")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the JSP servlet is registered.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/ # Path of the main dispatcher servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.comment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comment for the session cookie.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Domain for the session cookie.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.http-only")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# "HttpOnly" flag for the session cookie.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Session cookie name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path of the session cookie.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.cookie.secure")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# "Secure" flag for the session cookie.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.persistent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to persist session data between restarts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.store-dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Directory used to store session data.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Session timeout. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.servlet.session.tracking-modes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Session tracking modes (one or more of the following: "cookie", "url", "ssl").')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.ciphers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Supported SSL ciphers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.client-auth")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Enable SSL support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.enabled-protocols")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Enabled SSL protocols.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-alias")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Alias that identifies the key in the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key in the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path to the key store that holds the SSL certificate (typically a jks file).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-store-provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Provider for the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.key-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("TLS # SSL protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.trust-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Trust store that holds SSL certificates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.trust-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.trust-store-provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Provider for the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.ssl.trust-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accept-count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum queue length for incoming connection requests when all possible request processing threads are in use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.buffered")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to buffer output such that it is flushed only periodically.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.directory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("logs # Directory in which log files are created. Can be absolute or relative to the Tomcat base dir.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable access log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.file-date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".yyyy-MM-dd # Date format to place in the log file name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("common # Format pattern for access logs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("access_log # Log file name prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.rename-on-rotate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to defer inclusion of the date stamp in the file name until rotate time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.request-attributes-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Set request attributes for the IP address, Hostname, protocol, and port used for the request.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.rotate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable access log rotation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.accesslog.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".log # Log file name suffix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.additional-tld-skip-patterns")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of additional patterns that match jars to ignore for TLD scanning.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.background-processor-delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30s # Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.basedir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Tomcat base directory. If not specified, a temporary directory is used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.internal-proxies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\")]),t._v("\n\t\t192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n\t\t169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n\t\t127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n\t\t172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n\t\t172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("\t\t172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Regular expression matching trusted IP addresses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.max-connections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum number of connections that the server accepts and processes at any given time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.max-http-header-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size, in bytes, of the HTTP message header.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.max-http-post-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size, in bytes, of the HTTP post content.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.max-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum number of worker threads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.min-spare-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Minimum number of worker threads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.port-header")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("X-Forwarded-Port # Name of the HTTP header used to override the original port value.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.protocol-header")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Header that holds the incoming protocol, usually named "X-Forwarded-Proto".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.protocol-header-https-value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("https # Value of the protocol header indicating whether the incoming request uses SSL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.redirect-context-root")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether requests to the context root should be redirected by appending a / to the path.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.remote-ip-header")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.resource.cache-ttl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Time-to-live of the static resource cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.uri-encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Character encoding to use to decode the URI.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.tomcat.use-relative-redirects")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Undertow access log directory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable the access log.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("common # Format pattern for access logs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("access_log. # Log file name prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.rotate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable access log rotation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.accesslog.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("log # Log file name suffix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.buffer-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Size of each buffer, in bytes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.direct-buffers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to allocate buffers outside the Java heap.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.io-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of I/O threads to create for the worker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.eager-filter-init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether servlet filters should be initialized on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.max-http-post-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size, in bytes, of the HTTP post content.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.undertow.worker-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of worker threads.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# FREEMARKER (FreeMarkerProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.allow-request-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.allow-session-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable template caching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.charset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Template encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.check-template-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the templates location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.content-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("text/html # Content-Type value.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable MVC view resolution for this technology.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.expose-request-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all request attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.expose-session-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all HttpSession attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.expose-spring-macro-helpers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether to expose a RequestContext for use by Spring\'s macro library, under the name "springMacroRequestContext".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.prefer-file-system-access")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to prefer file system access for template loading. File system access enables hot detection of template changes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Prefix that gets prepended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.request-context-attribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the RequestContext attribute for all views.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.settings.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Well-known FreeMarker keys which are passed to FreeMarker's Configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".ftl # Suffix that gets appended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.template-loader-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/templates/ # Comma-separated list of template paths.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.freemarker.view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# White list of view names that can be resolved.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GROOVY TEMPLATES (GroovyTemplateProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.allow-request-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.allow-session-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable template caching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.charset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Template encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.check-template-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the templates location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.configuration.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# See GroovyMarkupConfigurer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.content-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("text/html # Content-Type value.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable MVC view resolution for this technology.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.expose-request-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all request attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.expose-session-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all HttpSession attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.expose-spring-macro-helpers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether to expose a RequestContext for use by Spring\'s macro library, under the name "springMacroRequestContext".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Prefix that gets prepended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.request-context-attribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the RequestContext attribute for all views.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.resource-loader-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/templates/ # Template path.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".tpl # Suffix that gets appended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.groovy.template.view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# White list of view names that can be resolved.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING HATEOAS (HateoasProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.hateoas.use-hal-as-default-json-media-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether application/hal+json responses should be sent to requests that accept application/json.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HTTP message conversion")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.converters.preferred-json-mapper")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HTTP encoding (HttpEncodingProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.charset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('UTF-8 # Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable http encoding support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.force")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to force the encoding to the configured charset on HTTP requests and responses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.force-request")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Whether to force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.force-response")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to force the encoding to the configured charset on HTTP responses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.http.encoding.mapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Locale in which to encode mapping.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MULTIPART (MultipartProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable support of multipart uploads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.file-size-threshold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('0 # Threshold after which files are written to disk. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Intermediate location of uploaded files.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.max-file-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('1MB # Max file size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.max-request-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('10MB # Max request size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.servlet.multipart.resolve-lazily")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to resolve the multipart request lazily at the time of file or parameter access.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JACKSON (JacksonProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.default-property-inclusion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.deserialization.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jackson on/off features that affect the way Java objects are deserialized.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.generator.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jackson on/off features for generators.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.joda-date-time-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Joda date time format string. If not configured, "date-format" is used as a fallback if it is configured with a format string.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.locale")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Locale used for formatting.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.mapper.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jackson general purpose on/off features.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.parser.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jackson on/off features for parsers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.property-naming-strategy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.serialization.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jackson on/off features that affect the way Java objects are serialized.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jackson.time-zone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('#  Time zone used when formatting dates. For instance, "America/Los_Angeles" or "GMT+10".')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GSON (GsonProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Format to use when serializing Date objects.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.disable-html-escaping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to disable the escaping of HTML characters such as '<', '>', etc.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.disable-inner-class-serialization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to exclude inner classes during serialization.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.enable-complex-map-key-serialization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable serialization of complex map keys (i.e. non-primitives).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.exclude-fields-without-expose-annotation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.field-naming-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Naming policy that should be applied to an object's field during serialization and deserialization.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.generate-non-executable-json")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to generate non executable JSON by prefixing the output with some special text.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.lenient")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.long-serialization-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Serialization policy for Long and long types.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.pretty-printing")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to output serialized JSON that fits in a page for pretty printing.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.gson.serialize-nulls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to serialize null fields.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JERSEY (JerseyProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jersey.application-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Path that serves as the base URI for the application. If specified, overrides the value of "@ApplicationPath".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jersey.filter.order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Jersey filter chain order.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jersey.init.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Init parameters to pass to Jersey through the servlet or filter.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jersey.servlet.load-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1 # Load on startup priority of the Jersey servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jersey.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("servlet # Jersey integration type.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING LDAP (LdapProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.anonymous-read-only")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether read-only operations should use an anonymous environment.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.base")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Base suffix from which all operations should originate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.base-environment.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# LDAP specification settings.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.urls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# LDAP URLs of the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login username of the server.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# EMBEDDED LDAP (EmbeddedLdapProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.base-dn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# List of base DNs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.credential.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Embedded LDAP username.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.credential.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Embedded LDAP password.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.ldif")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:schema.ldif # Schema (LDIF) script resource reference.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Embedded LDAP port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.validation.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable LDAP schema validation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.ldap.embedded.validation.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path to the custom schema.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MUSTACHE TEMPLATES (MustacheAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.allow-request-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.allow-session-override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable template caching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.charset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Template encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.check-template-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the templates location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.content-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("text/html # Content-Type value.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable MVC view resolution for this technology.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.expose-request-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all request attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.expose-session-attributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether all HttpSession attributes should be added to the model prior to merging with the template.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.expose-spring-macro-helpers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether to expose a RequestContext for use by Spring\'s macro library, under the name "springMacroRequestContext".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/templates/ # Prefix to apply to template names.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.request-context-attribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the RequestContext attribute for all views.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".mustache # Suffix to apply to template names.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mustache.view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# White list of view names that can be resolved.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING MVC (WebMvcProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.async.request-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Amount of time before asynchronous request handling times out.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.contentnegotiation.favor-parameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether a request parameter ("format" by default) should be used to determine the requested media type.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.contentnegotiation.favor-path-extension")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether the path extension in the URL path should be used to determine the requested media type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.contentnegotiation.media-types.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Map file extensions to media types for content negotiation. For instance, yml to text/yaml.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.contentnegotiation.parameter-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Query parameter name to use when "favor-parameter" is enabled.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Date format to use. For instance, `dd/MM/yyyy`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.dispatch-trace-request")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to dispatch TRACE requests to the FrameworkServlet doService method.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.dispatch-options-request")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.favicon.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable resolution of favicon.ico.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.formcontent.putfilter.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Spring's HttpPutFormContentFilter.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.ignore-default-model-on-redirect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether the content of the "default" model should be ignored during redirect scenarios.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.locale")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Locale to use. By default, this locale is overridden by the "Accept-Language" header.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.locale-resolver")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("accept-header # Define how the locale should be resolved.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.log-resolved-exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether to enable warn logging of exceptions resolved by a "HandlerExceptionResolver".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.message-codes-resolver-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.pathmatch.use-registered-suffix-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether suffix pattern matching should work only against extensions registered with "spring.mvc.contentnegotiation.media-types.*".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.pathmatch.use-suffix-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether to use suffix pattern match (".*") when matching patterns to requests.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.servlet.load-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1 # Load on startup priority of the dispatcher servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.static-path-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/** # Path pattern used for static resources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.throw-exception-if-no-handler-found")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Whether a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.view.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Spring MVC view prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mvc.view.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Spring MVC view suffix.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING RESOURCES HANDLING (ResourceProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.add-mappings")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable default resource handling.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.cache-private")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate that the response message is intended for a single user and must not be stored by a shared cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.cache-public")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate that any cache may store the response.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum time the response should be cached, in seconds if no duration suffix is not specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.must-revalidate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.no-cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate that the cached response can be reused only if re-validated with the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.no-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate to not cache the response in any case.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.no-transform")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Indicate intermediaries (caches and others) that they should not transform the response content.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.proxy-revalidate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Same meaning as the "must-revalidate" directive, except that it does not apply to private caches.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.s-max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.stale-if-error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.cachecontrol.stale-while-revalidate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.cache.period")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable caching in the Resource chain.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.gzipped")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable resolution of already gzipped resources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.html-application-cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable HTML5 application cache manifest rewriting.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.strategy.content.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable the content Version Strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.strategy.content.paths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/** # Comma-separated list of patterns to apply to the content Version Strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.strategy.fixed.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable the fixed Version Strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.strategy.fixed.paths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/** # Comma-separated list of patterns to apply to the fixed Version Strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.chain.strategy.fixed.version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Version string to use for the fixed Version Strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.resources.static-locations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING SESSION (SessionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Session store type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Session timeout. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.servlet.filter-order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-2147483598 # Session repository filter order.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.servlet.filter-dispatcher-types")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("async,error,request # Session repository filter dispatcher types.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING SESSION HAZELCAST (HazelcastSessionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.hazelcast.flush-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("on-save # Sessions flush mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.hazelcast.map-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("spring:session:sessions # Name of the map used to store sessions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING SESSION JDBC (JdbcSessionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.jdbc.cleanup-cron")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 * * * * * # Cron expression for expired session cleanup job.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.jdbc.initialize-schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("embedded # Database schema initialization mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.jdbc.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.jdbc.table-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("SPRING_SESSION # Name of the database table used to store sessions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING SESSION MONGODB (MongoSessionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.mongodb.collection-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("sessions # Collection name used to store sessions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING SESSION REDIS (RedisSessionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.redis.cleanup-cron")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 * * * * * # Cron expression for expired session cleanup job.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.redis.flush-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("on-save # Sessions flush mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.session.redis.namespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("spring:session # Namespace for keys used to store sessions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# THYMELEAF (ThymeleafAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable template caching.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.check-template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the template exists before rendering it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.check-template-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the templates location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Thymeleaf view resolution for Web frameworks.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.enable-spring-el-compiler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable the SpringEL compiler in SpringEL expressions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("UTF-8 # Template files encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.excluded-view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of view names (patterns allowed) that should be excluded from resolution.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("HTML # Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/templates/ # Prefix that gets prepended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.reactive.chunked-mode-view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.reactive.full-mode-view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.reactive.max-chunk-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Maximum size of data buffers used for writing to the response, in bytes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.reactive.media-types")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Media types supported by the view technology.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.servlet.content-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("text/html # Content-Type value written to HTTP responses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".html # Suffix that gets appended to view names when building a URL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.template-resolver-order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Order of the template resolver in the chain.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.thymeleaf.view-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of view names (patterns allowed) that can be resolved.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING WEBFLUX (WebFluxProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webflux.date-format")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Date format to use. For instance, `dd/MM/yyyy`.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webflux.static-path-pattern")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/** # Path pattern used for static resources.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING WEB SERVICES (WebServicesProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webservices.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/services # Path that serves as the base URI for the services.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webservices.servlet.init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Servlet init parameters to pass to Spring Web Services.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webservices.servlet.load-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1 # Load on startup priority of the Spring Web Services servlet.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.webservices.wsdl-locations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SECURITY PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SECURITY (SecurityProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.filter.order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-100 # Security filter chain order.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.filter.dispatcher-types")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("async,error,request # Security filter chain dispatcher types.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.user.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("user # Default user name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.user.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password for the default user name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.user.roles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Granted roles for the default user name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.oauth2.client.provider.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# OAuth provider details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.oauth2.client.registration.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# OAuth client registrations.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# FLYWAY (FlywayProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.baseline-description")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.baseline-on-migrate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.baseline-version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Version to start migration")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.check-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that migration scripts location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.clean-disabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.clean-on-validation-error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.dry-run-output")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable flyway.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.error-handlers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.group")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.ignore-future-migrations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.ignore-missing-migrations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.init-sqls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SQL statements to execute to initialize a connection immediately after obtaining it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.installed-by")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.locations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:db/migration # The locations of migrations scripts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.mixed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.out-of-order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JDBC password to use if you want Flyway to create its own DataSource.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.placeholder-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.placeholder-replacement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.placeholder-suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.placeholders.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.repeatable-sql-migration-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.schemas")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# schemas to update")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.skip-default-callbacks")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.skip-default-resolvers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.sql-migration-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("V #")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.sql-migration-separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.sql-migration-suffix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v(".sql #")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.sql-migration-suffixes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.table")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.undo-sql-migration-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JDBC url of the database to migrate. If not set, the primary configured data source is used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the database to migrate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.flyway.validate-on-migrate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("#")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LIQUIBASE (LiquibaseProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.change-log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.check-change-log-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to check that the change log location exists.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of runtime contexts to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.default-schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default database schema.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.drop-first")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to first drop the database schema.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Liquibase support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of runtime labels to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.parameters.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Change log parameters.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the database to migrate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.rollback-file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# File to which rollback SQL is written when an update is performed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JDBC URL of the database to migrate. If not set, the primary configured data source is used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.liquibase.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the database to migrate.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# COUCHBASE (CouchbaseProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.bootstrap-hosts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Couchbase nodes (host or IP address) to bootstrap from.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.bucket.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("default # Name of the bucket to connect to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.bucket.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the bucket.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.endpoints.key-value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Number of sockets per node against the key/value service.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.endpoints.queryservice.min-endpoints")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Minimum number of sockets per node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.endpoints.queryservice.max-endpoints")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Maximum number of sockets per node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.endpoints.viewservice.min-endpoints")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Minimum number of sockets per node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.endpoints.viewservice.max-endpoints")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Maximum number of sockets per node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.ssl.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Whether to enable SSL support. Enabled automatically if a "keyStore" is provided unless specified otherwise.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.ssl.key-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path to the JVM key store that holds the certificates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.ssl.key-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.timeouts.connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("5000ms # Bucket connections timeouts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.timeouts.key-value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2500ms # Blocking operations performed on a specific key timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.timeouts.query")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("7500ms # N1QL query operations timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.timeouts.socket-connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1000ms # Socket connect connections timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.couchbase.env.timeouts.view")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("7500ms # Regular and geospatial view operations timeout.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DAO (PersistenceExceptionTranslationAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.dao.exceptiontranslation.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the PersistenceExceptionTranslationPostProcessor.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CASSANDRA (CassandraProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.cluster-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the Cassandra cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.compression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("none # Compression supported by the Cassandra binary protocol.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Socket option: connection time out.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.consistency-level")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Queries consistency level.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.contact-points")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Cluster node addresses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.fetch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Queries default fetch size.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.keyspace-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Keyspace name to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.load-balancing-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Class name of the load balancing policy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Port of the Cassandra server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.pool.heartbeat-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30s # Heartbeat interval after which a message is sent on an idle connection to make sure it's still alive. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.pool.idle-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("120s # Idle timeout before an idle connection is removed. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.pool.max-queue-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("256 # Maximum number of requests that get queued if no connection is available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.pool.pool-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("5000ms # Pool timeout when trying to acquire a connection from a host's pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Socket option: read time out.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.reconnection-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Reconnection policy class.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.repositories.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("auto # Type of Cassandra repositories to enable.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.retry-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Class name of the retry policy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.serial-consistency-level")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Queries serial consistency level.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.schema-action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("none # Schema action to take at startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.ssl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Enable SSL support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.cassandra.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the server.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA COUCHBASE (CouchbaseDataProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.couchbase.auto-index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Automatically create views and indexes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.couchbase.consistency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("read-your-own-writes # Consistency to apply by default on generated queries.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.couchbase.repositories.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("auto # Type of Couchbase repositories to enable.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ELASTICSEARCH (ElasticsearchProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.elasticsearch.cluster-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("elasticsearch # Elasticsearch cluster name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.elasticsearch.cluster-nodes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of cluster node addresses.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.elasticsearch.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional properties used to configure the client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.elasticsearch.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Elasticsearch repositories.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA LDAP")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.ldap.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable LDAP repositories.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MONGODB (MongoProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.authentication-database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Authentication database name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Database name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.field-naming-strategy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the FieldNamingStrategy to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.grid-fs-database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# GridFS database name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mongo server host. Cannot be set with URI.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the mongo server. Cannot be set with URI.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mongo server port. Cannot be set with URI.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.repositories.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("auto # Type of Mongo repositories to enable.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("mongodb://localhost/test # Mongo database URI. Cannot be set with host, port and credentials.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.mongodb.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the mongo server. Cannot be set with URI.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA REDIS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.redis.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Redis repositories.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NEO4J (Neo4jProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.auto-index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("none # Auto index mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.embedded.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable embedded mode if the embedded driver is available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.open-in-view")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Neo4j repositories.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# URI used by the driver. Auto-detected by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.neo4j.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the server.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA REST (RepositoryRestProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.base-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Base path to be used by Spring Data REST to expose repository resources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.default-media-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Content type to use as a default when none is specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.default-page-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default size of pages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.detection-strategy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("default # Strategy to use to determine which repositories get exposed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.enable-enum-translation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable enum value translation through the Spring Data REST default resource bundle.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.limit-param-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the URL query string parameter that indicates how many results to return at once.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.max-page-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum size of pages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.page-param-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the URL query string parameter that indicates what page to return.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.return-body-on-create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to return a response body after creating an entity.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.return-body-on-update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to return a response body after updating an entity.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.rest.sort-param-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the URL query string parameter that indicates what direction to sort results.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SOLR (SolrProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.solr.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('http://127.0.0.1:8983/solr # Solr host. Ignored if "zk-host" is set.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.solr.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Solr repositories.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.solr.zk-host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ZooKeeper host address in the form HOST:PORT.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATA WEB (SpringDataWebProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.default-page-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("20 # Default page size.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.max-page-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2000 # Maximum page size to be accepted.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.one-indexed-parameters")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to expose and assume 1-based page number indexes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.page-parameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("page # Page index parameter name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# General prefix to be prepended to the page number and page size parameters.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.qualifier-delimiter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("_ # Delimiter to be used between the qualifier and the actual page number and size properties.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.pageable.size-parameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("size # Page size parameter name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.web.sort.sort-parameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("sort # Sort parameter name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.continue-on-error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to stop if an error occurs while initializing the database.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Data (DML) script resource references.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.data-username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Username of the database to execute DML scripts (if different).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.data-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the database to execute DML scripts (if different).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.dbcp2.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Commons DBCP2 specific settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.driver-class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.generate-unique-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to generate a random datasource name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.hikari.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Hikari specific settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.initialization-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("embedded # Initialize the datasource with available DDL and DML scripts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.jmx-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable JMX support (if provided by the underlying pool).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.jndi-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JNDI location of the datasource. Class, url, username & password are ignored when set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Name of the datasource. Default to "testdb" when using an embedded database.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the database.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.platform")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("all # Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Schema (DDL) script resource references.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.schema-username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Username of the database to execute DDL scripts (if different).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.schema-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the database to execute DDL scripts (if different).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("; # Statement separator in SQL initialization scripts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.sql-script-encoding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SQL scripts encoding.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.tomcat.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Tomcat datasource specific settings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JDBC URL of the database.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login username of the database.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.xa.data-source-class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# XA datasource fully qualified name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.datasource.xa.properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Properties to pass to the XA data source.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JEST (Elasticsearch HTTP client) (JestProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.connection-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3s # Connection timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.multi-threaded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable connection requests from multiple execution threads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.proxy.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Proxy host the HTTP client should use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.proxy.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Proxy port the HTTP client should use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3s # Read timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.uris")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.elasticsearch.jest.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login username.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# H2 Web Console (H2ConsoleProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.h2.console.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable the console.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.h2.console.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/h2-console # Path at which the console is available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.h2.console.settings.trace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable trace output.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.h2.console.settings.web-allow-others")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable remote access.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# InfluxDB (InfluxDbProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.influx.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.influx.url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# URL of the InfluxDB instance to which to connect.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.influx.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JOOQ (JooqProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jooq.sql-dialect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SQL dialect to use. Auto-detected by default.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JDBC (JdbcProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jdbc.template.fetch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1 # Number of rows that should be fetched from the database when more rows are needed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jdbc.template.max-rows")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1 # Maximum number of rows.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jdbc.template.query-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Query timeout. Default is to use the JDBC driver's default configuration. If a duration suffix is not specified, seconds will be used.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.data.jpa.repositories.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable JPA repositories.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.database-platform")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.generate-ddl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to initialize the schema on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.hibernate.ddl-auto")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.hibernate.naming.implicit-strategy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the implicit naming strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.hibernate.naming.physical-strategy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Fully qualified name of the physical naming strategy.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.hibernate.use-new-id-generator-mappings")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.mapping-resources")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Mapping resources (equivalent to "mapping-file" entries in persistence.xml).')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.open-in-view")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional native properties to set on the JPA provider.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jpa.show-sql")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable logging of SQL statements.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JTA (JtaAutoConfiguration)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable JTA support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.log-dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Transaction logs directory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.transaction-manager-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Transaction manager unique identifier.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ATOMIKOS (AtomikosProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.borrow-connection-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30 # Timeout, in seconds, for borrowing connections from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to ignore the transacted flag when creating session.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.local-transaction-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether local transactions are desired.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.maintenance-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, between runs of the pool's maintenance thread.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.max-idle-time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, after which connections are cleaned up from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.max-lifetime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.max-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The maximum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.min-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The minimum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.reap-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.unique-resource-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("jmsConnectionFactory # The unique name used to identify the resource during recovery.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Vendor-specific implementation of XAConnectionFactory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.connectionfactory.xa-properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Vendor-specific XA properties.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.borrow-connection-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30 # Timeout, in seconds, for borrowing connections from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.concurrent-connection-validation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to use concurrent connection validation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.default-isolation-level")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default isolation level of connections provided by the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.login-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout, in seconds, for establishing a database connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.maintenance-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, between runs of the pool's maintenance thread.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.max-idle-time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, after which connections are cleaned up from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.max-lifetime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.max-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The maximum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.min-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The minimum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.reap-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.test-query")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SQL query or statement used to validate a connection before returning it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.unique-resource-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("dataSource # The unique name used to identify the resource during recovery.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.xa-data-source-class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Vendor-specific implementation of XAConnectionFactory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.datasource.xa-properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Vendor-specific XA properties.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.allow-sub-transactions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Specify whether sub-transactions are allowed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.checkpoint-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("500 # Interval between checkpoints, expressed as the number of log writes between two checkpoints.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.default-jta-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms # Default timeout for JTA transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.default-max-wait-time-on-shutdown")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("9223372036854775807 # How long should normal shutdown (no-force) wait for transactions to complete.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.enable-logging")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable disk logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.force-shutdown-on-vm-exit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether a VM shutdown should trigger forced shutdown of the transaction core.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.log-base-dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Directory in which the log files should be stored.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.log-base-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("tmlog # Transactions log file base name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.max-actives")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("50 # Maximum number of active transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.max-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("300000ms # Maximum timeout that can be allowed for transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.recovery.delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms # Delay between two recovery scans.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("86400000ms # Delay after which recovery can cleanup pending ('orphaned') log entries.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.recovery.max-retries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("5 # Number of retry attempts to commit the transaction before throwing an exception.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.recovery.retry-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms # Delay between retry attempts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.serial-jta-transactions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether sub-transactions should be joined when possible.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Transaction manager implementation that should be started.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.threaded-two-phase-commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to use different (and concurrent) threads for two-phase commit on the participating resources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.atomikos.properties.transaction-manager-unique-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The transaction manager's unique name.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BITRONIX")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.acquire-increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Number of connections to create when growing the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.acquisition-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.acquisition-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30 # Timeout, in seconds, for acquiring connections from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.allow-local-transactions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the transaction manager should allow mixing XA and non-XA transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.apply-transaction-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether the transaction timeout should be set on the XAResource when it is enlisted.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether resources should be enlisted and delisted automatically.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.cache-producers-consumers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether producers and consumers should be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Underlying implementation class name of the XA resource.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.defer-connection-release")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the provider can run many transactions on the same connection and supports transaction interleaving.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.disabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.driver-properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Properties that should be set on the underlying implementation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.failed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mark this resource producer as failed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.ignore-recovery-failures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether recovery failures should be ignored.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.max-idle-time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, after which connections are cleaned up from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.max-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10 # The maximum size of the pool. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.min-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The minimum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The password to use to connect to the JMS provider.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.share-transaction-connections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false #  Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.test-connections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether connections should be tested when acquired from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.two-pc-ordering-position")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.unique-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("jmsConnectionFactory # The unique name used to identify the resource during recovery.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.use-tm-join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether TMJOIN should be used when starting XAResources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.connectionfactory.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The user to use to connect to the JMS provider.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.acquire-increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Number of connections to create when growing the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.acquisition-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.acquisition-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30 # Timeout, in seconds, for acquiring connections from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.allow-local-transactions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the transaction manager should allow mixing XA and non-XA transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.apply-transaction-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether the transaction timeout should be set on the XAResource when it is enlisted.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.automatic-enlisting-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether resources should be enlisted and delisted automatically.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.class-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Underlying implementation class name of the XA resource.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.cursor-holdability")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The default cursor holdability for connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.defer-connection-release")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the database can run many transactions on the same connection and supports transaction interleaving.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.disabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.driver-properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Properties that should be set on the underlying implementation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.enable-jdbc4-connection-test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether Connection.isValid() is called when acquiring a connection from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.failed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mark this resource producer as failed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.ignore-recovery-failures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether recovery failures should be ignored.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.isolation-level")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The default isolation level for connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.local-auto-commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The default auto-commit mode for local transactions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.login-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout, in seconds, for establishing a database connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.max-idle-time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # The time, in seconds, after which connections are cleaned up from the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.max-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10 # The maximum size of the pool. 0 denotes no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.min-pool-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The minimum size of the pool.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.prepared-statement-cache-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # The target size of the prepared statement cache. 0 disables the cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.share-transaction-connections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false #  Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.test-query")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SQL query or statement used to validate a connection before returning it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.two-pc-ordering-position")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.unique-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("dataSource # The unique name used to identify the resource during recovery.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.datasource.use-tm-join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether TMJOIN should be used when starting XAResources.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.allow-multiple-lrc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to allow multiple LRC resources to be enlisted into the same transaction.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.asynchronous2-pc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable asynchronously execution of two phase commit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.background-recovery-interval-seconds")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # Interval in seconds at which to run the recovery process in the background.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.current-node-only-recovery")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to recover only the current node.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.debug-zero-resource-transaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to log the creation and commit call stacks of transactions executed without a single enlisted resource.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.default-transaction-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # Default transaction timeout, in seconds.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.disable-jmx")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable JMX support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.exception-analyzer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Set the fully qualified name of the exception analyzer implementation to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.filter-log-status")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable filtering of logs so that only mandatory logs are written.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.force-batching-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true #  Whether disk forces are batched.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.forced-write-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether logs are forced to disk.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.graceful-shutdown-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60 # Maximum amount of seconds the TM waits for transactions to get done before aborting them at shutdown time.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JNDI name of the TransactionSynchronizationRegistry.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.jndi-user-transaction-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JNDI name of the UserTransaction.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.journal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("disk # Name of the journal. Can be 'disk', 'null', or a class name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.log-part1-filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("btm1.tlog # Name of the first fragment of the journal.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.log-part2-filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("btm2.tlog # Name of the second fragment of the journal.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.max-log-size-in-mb")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Maximum size in megabytes of the journal fragments.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.resource-configuration-filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ResourceLoader configuration file name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.server-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ASCII ID that must uniquely identify this TM instance. Defaults to the machine's IP address.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.skip-corrupted-logs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Skip corrupted transactions log entries.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.bitronix.properties.warn-about-zero-resource-transaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to log a warning for transactions executed without a single enlisted resource.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NARAYANA (NarayanaProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.default-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("60s # Transaction timeout. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.expiry-scanners")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.log-dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Transaction object store directory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.one-phase-commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable one phase commit optimization.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.periodic-recovery-period")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("120s # Interval in which periodic recovery scans are performed. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-backoff-period")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Back off period between first and second phases of the recovery scan. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-db-pass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Database password to be used by the recovery manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-db-user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Database username to be used by the recovery manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-jms-pass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JMS password to be used by the recovery manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-jms-user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# JMS username to be used by the recovery manager.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.recovery-modules")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of recovery modules.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.transaction-manager-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Unique transaction manager id.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jta.narayana.xa-resource-orphan-filters")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of orphan filters.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# EMBEDDED MONGODB (EmbeddedMongoProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mongodb.embedded.features")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("sync_delay # Comma-separated list of features to enable.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mongodb.embedded.storage.database-dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Directory used for data storage.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mongodb.embedded.storage.oplog-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum size of the oplog, in megabytes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mongodb.embedded.storage.repl-set-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the replica set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.mongodb.embedded.version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3.2.2 # Version of Mongo to use.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# REDIS (RedisProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.cluster.max-redirects")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum number of redirects to follow when executing commands across the cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.cluster.nodes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Comma-separated list of "host:port" pairs to bootstrap from.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Database index used by the connection factory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Connection URL. Overrides host, port, and password. User is ignored. Example: redis://user:password@example.com:6379")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Redis server host.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.jedis.pool.max-active")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8 # Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.jedis.pool.max-idle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('8 # Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.jedis.pool.max-wait")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1ms # Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.jedis.pool.min-idle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.lettuce.pool.max-active")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8 # Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.lettuce.pool.max-idle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('8 # Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.lettuce.pool.max-wait")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1ms # Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.lettuce.pool.min-idle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.lettuce.shutdown-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("100ms # Shutdown timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the redis server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("6379 # Redis server port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.sentinel.master")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the Redis server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.sentinel.nodes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Comma-separated list of "host:port" pairs.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.ssl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable SSL support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Connection timeout.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TRANSACTION (TransactionProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.transaction.default-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default transaction timeout. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.transaction.rollback-on-commit-failure")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to roll back on commit failures.")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# INTEGRATION PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ACTIVEMQ (ActiveMQProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.broker-url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# URL of the ActiveMQ broker. Auto-generated by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.close-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("15s # Time to wait before considering a close complete.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.in-memory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.non-blocking-redelivery")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the broker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.send-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Time to wait on message sends for a response. Set it to 0 to wait forever.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the broker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.packages.trust-all")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to trust all packages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.packages.trusted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of specific packages to trust (when not trusting all packages).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.block-if-full")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.block-if-full-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1ms # Blocking period before throwing an exception if the pool is still full.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.create-connection-on-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to create a connection on startup. Can be used to warm up the pool on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether a PooledConnectionFactory should be created, instead of a regular ConnectionFactory.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.expiry-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Connection expiration timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.idle-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("30s # Connection idle timeout.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.max-connections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Maximum number of pooled connections.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.maximum-active-session-per-connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("500 # Maximum number of active sessions per connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.reconnect-on-exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Reset the connection when a "JMSException" occurs.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.time-between-expiration-check")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("-1ms # Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.activemq.pool.use-anonymous-producers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('true # Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ARTEMIS (ArtemisProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.cluster-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Cluster password. Randomly generated on startup by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.data-directory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Journal file directory. Not necessary if persistence is turned off.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable embedded mode if the Artemis server APIs are available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.persistent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable persistent store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.queues")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of queues to create on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.server-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Server ID. By default, an auto-incremented counter is used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.embedded.topics")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of topics to create on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Artemis broker host.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Artemis deployment mode, auto-detected by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the broker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("61616 # Artemis broker port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.artemis.user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the broker.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING BATCH (BatchProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.batch.initialize-schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("embedded # Database schema initialization mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.batch.job.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Execute all Spring Batch jobs in the context on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.batch.job.names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.batch.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.batch.table-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Table prefix for all the batch meta-data tables.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SPRING INTEGRATION (IntegrationProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.integration.jdbc.initialize-schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("embedded # Database schema initialization mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.integration.jdbc.schema")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JMS (JmsProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.jndi-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.listener.acknowledge-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.listener.auto-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Start the container automatically on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.listener.concurrency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Minimum number of concurrent consumers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.listener.max-concurrency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum number of concurrent consumers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.pub-sub-domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether the default destination type is topic.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.default-destination")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default destination to use on send and receive operations that do not have a destination parameter.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.delivery-delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Delivery delay to use for send calls.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.delivery-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Delivery mode. Enables QoS (Quality of Service) when set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.priority")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Priority of a message when sending. Enables QoS (Quality of Service) when set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.qos-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable explicit QoS (Quality of Service) when sending a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.receive-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout to use for receive calls.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.jms.template.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# APACHE KAFKA (KafkaProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.client-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ID to pass to the server when making requests. Used for server-side logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.fail-fast")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to fail fast if the broker is not available on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional admin-specific properties used to configure the client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the private key in the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.keystore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.keystore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.keystore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.truststore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.truststore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.truststore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.admin.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SSL protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.bootstrap-servers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.client-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ID to pass to the server when making requests. Used for server-side logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.auto-commit-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.auto-offset-reset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.bootstrap-servers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.client-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ID to pass to the server when making requests. Used for server-side logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.enable-auto-commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether the consumer's offset is periodically committed in the background.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.fetch-max-wait")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Maximum amount of time the server blocks before answering the fetch request if there isn\'t sufficient data to immediately satisfy the requirement given by "fetch.min.bytes".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.fetch-min-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Minimum amount of data, in bytes, the server should return for a fetch request.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.group-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Unique string that identifies the consumer group to which this consumer belongs.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.heartbeat-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Expected time between heartbeats to the consumer coordinator.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.key-deserializer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Deserializer class for keys.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.max-poll-records")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum number of records returned in a single call to poll().")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional consumer-specific properties used to configure the client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the private key in the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.keystore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.keystore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.keystore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.truststore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.truststore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.truststore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SSL protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.consumer.value-deserializer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Deserializer class for values.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.jaas.control-flag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("required # Control flag for login configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.jaas.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable JAAS configuration.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.jaas.login-module")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("com.sun.security.auth.module.Krb5LoginModule # Login module.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.jaas.options")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional JAAS options.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.ack-count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.ack-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Listener AckMode. See the spring-kafka documentation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.ack-time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Time between offset commits when ackMode is "TIME" or "COUNT_TIME".')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.client-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Prefix for the listener's consumer client.id property.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.concurrency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of threads to run in the listener containers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.idle-event-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Time between publishing idle consumer events (no data received).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.log-container-config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to log the container configuration during initialization (INFO level).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.monitor-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.no-poll-threshold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.poll-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout to use when polling the consumer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.listener.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("single # Listener type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.acks")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of acknowledgments the producer requires the leader to have received before considering a request complete.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of records to batch before sending.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.bootstrap-servers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.buffer-memory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Total bytes of memory the producer can use to buffer records waiting to be sent to the server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.client-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# ID to pass to the server when making requests. Used for server-side logging.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.compression-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Compression type for all data generated by the producer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.key-serializer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Serializer class for keys.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional producer-specific properties used to configure the client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.retries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# When greater than zero, enables retrying of failed sends.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the private key in the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.keystore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.keystore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.keystore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.truststore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.truststore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.truststore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SSL protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.transaction-id-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# When non empty, enables transaction support for producer.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.producer.value-serializer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Serializer class for values.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.properties.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional properties, common to producers and consumers, used to configure the client.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password of the private key in the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.keystore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.keystore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the key store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.keystore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.truststore-location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Location of the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.truststore-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Store password for the trust store file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.truststore-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SSL protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.kafka.template.default-topic")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Default topic to which messages are sent.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RABBIT (RabbitProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.addresses")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of addresses to which the client should connect.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.cache.channel.checkout-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Duration to wait to obtain a channel if the cache size has been reached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.cache.channel.size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of channels to retain in the cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.cache.connection.mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("channel # Connection factory cache mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.cache.connection.size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of connections to cache.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.connection-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Connection timeout. Set it to zero to wait forever.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.dynamic")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to create an AmqpAdmin bean.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # RabbitMQ host.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.acknowledge-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Acknowledge mode of container.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.auto-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to start the container automatically on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.consumers-per-queue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of consumers per queue.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.default-requeue-rejected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether rejected deliveries are re-queued by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.idle-event-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# How often idle container events should be published.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.prefetch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether publishing retries are enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.initial-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1000ms # Duration between the first and second attempt to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.max-attempts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3 # Maximum number of attempts to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.max-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms # Maximum duration between attempts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.multiplier")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Multiplier to apply to the previous retry interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.direct.retry.stateless")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether retries are stateless or stateful.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.acknowledge-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Acknowledge mode of container.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.auto-startup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to start the container automatically on startup.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.concurrency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Minimum number of listener invoker threads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.default-requeue-rejected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether rejected deliveries are re-queued by default.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.idle-event-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# How often idle container events should be published.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.max-concurrency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Maximum number of listener invoker threads.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.prefetch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether publishing retries are enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.initial-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1000ms # Duration between the first and second attempt to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.max-attempts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3 # Maximum number of attempts to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.max-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms #  Maximum duration between attempts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.multiplier")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Multiplier to apply to the previous retry interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.retry.stateless")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether retries are stateless or stateful.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.simple.transaction-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Number of messages to be processed in a transaction. That is, the number of messages between acks. For best results, it should be less than or equal to the prefetch count.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.listener.type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("simple # Listener container type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("guest # Login to authenticate against the broker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("5672 # RabbitMQ port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.publisher-confirms")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable publisher confirms.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.publisher-returns")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable publisher returns.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.requested-heartbeat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable SSL support.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.key-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path to the key store that holds the SSL certificate.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.key-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.key-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("PKCS12 # Key store type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.trust-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Trust store that holds SSL certificates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.trust-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the trust store.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.trust-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("JKS # Trust store type.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.ssl.algorithm")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SSL algorithm to use. By default, configured by the Rabbit client library.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.exchange")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of the default exchange to use for send operations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.mandatory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable mandatory messages.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.receive-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout for `receive()` operations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.reply-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Timeout for `sendAndReceive()` operations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.retry.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether publishing retries are enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.retry.initial-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1000ms # Duration between the first and second attempt to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.retry.max-attempts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3 # Maximum number of attempts to deliver a message.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.retry.max-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000ms # Maximum duration between attempts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.retry.multiplier")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Multiplier to apply to the previous retry interval.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.template.routing-key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Value of a default routing key to use for send operations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("guest # Login user to authenticate to the broker.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.rabbitmq.virtual-host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Virtual host to use when connecting to the broker.")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ACTUATOR PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MANAGEMENT HTTP SERVER (ManagementServerProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.add-application-context-header")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('false # Add the "X-Application-Context" HTTP header in each response.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.address")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Network address to which the management endpoints should bind. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.servlet.context-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Management endpoint context-path (for instance, `/management`). Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.ciphers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Supported SSL ciphers. Requires a custom management.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.client-auth")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('# Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store. Requires a custom management.server.port.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable SSL support. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.enabled-protocols")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Enabled SSL protocols. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-alias")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Alias that identifies the key in the key store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key in the key store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the key store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-store-provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Provider for the key store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.key-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the key store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("TLS # SSL protocol to use. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.trust-store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Trust store that holds SSL certificates. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.trust-store-password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Password used to access the trust store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.trust-store-provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Provider for the trust store. Requires a custom management.server.port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.server.ssl.trust-store-type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Type of the trust store. Requires a custom management.server.port.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CLOUDFOUNDRY")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.cloudfoundry.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable extended Cloud Foundry actuator endpoints.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.cloudfoundry.skip-ssl-validation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENDPOINTS GENERAL CONFIGURATION")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.enabled-by-default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether to enable or disable all endpoints by default.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENDPOINTS JMX CONFIGURATION (JmxEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.jmx.domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.springframework.boot # Endpoints JMX domain name. Fallback to 'spring.jmx.default-domain' if set.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.jmx.exposure.include")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("* # Endpoint IDs that should be included or '*' for all.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.jmx.exposure.exclude")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Endpoint IDs that should be excluded.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.jmx.static-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional static properties to append to all ObjectNames of MBeans representing Endpoints.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.jmx.unique-names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to ensure that ObjectNames are modified in case of conflict.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENDPOINTS WEB CONFIGURATION (WebEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.exposure.include")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("health,info # Endpoint IDs that should be included or '*' for all.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.exposure.exclude")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Endpoint IDs that should be excluded.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.base-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/actuator # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.path-mapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mapping between endpoint IDs and the path that should expose them.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENDPOINTS CORS CONFIGURATION (CorsEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.allow-credentials")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether credentials are supported. When not set, credentials are not supported.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.allowed-headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of headers to allow in a request. '*' allows all headers.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.allowed-methods")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of methods to allow. '*' allows all methods. When not set, defaults to GET.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.allowed-origins")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.exposed-headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated list of headers to include in a response.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.cors.max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1800s # How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AUDIT EVENTS ENDPOINT (AuditEventsEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.auditevents.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.auditevents.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the auditevents endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BEANS ENDPOINT (BeansEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.beans.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.beans.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the beans endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CONDITIONS REPORT ENDPOINT (ConditionsReportEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.conditions.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.conditions.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the conditions endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CONFIGURATION PROPERTIES REPORT ENDPOINT (ConfigurationPropertiesReportEndpoint, ConfigurationPropertiesReportEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.configprops.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.configprops.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the configprops endpoint.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.configprops.keys-to-sanitize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("password,secret,key,token,.*credentials.*,vcap_services,sun.java.command # Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENVIRONMENT ENDPOINT (EnvironmentEndpoint, EnvironmentEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.env.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.env.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the env endpoint.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.env.keys-to-sanitize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("password,secret,key,token,.*credentials.*,vcap_services,sun.java.command # Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# FLYWAY ENDPOINT (FlywayEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.flyway.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.flyway.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the flyway endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEALTH ENDPOINT (HealthEndpoint, HealthEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.health.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.health.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the health endpoint.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.health.roles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.health.show-details")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("never # When to show full health details.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAP DUMP ENDPOINT (HeapDumpWebEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.heapdump.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.heapdump.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the heapdump endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HTTP TRACE ENDPOINT (HttpTraceEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.httptrace.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.httptrace.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the httptrace endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# INFO ENDPOINT (InfoEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Arbitrary properties to add to the info endpoint.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.info.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.info.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the info endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JOLOKIA ENDPOINT (JolokiaProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.jolokia.config.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Jolokia settings. Refer to the documentation of Jolokia for more details.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.jolokia.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the jolokia endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LIQUIBASE ENDPOINT (LiquibaseEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.liquibase.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.liquibase.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the liquibase endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LOG FILE ENDPOINT (LogFileWebEndpoint, LogFileWebEndpointProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.logfile.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.logfile.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the logfile endpoint.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.logfile.external-file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# External Logfile to be accessed. Can be used if the logfile is written by output redirect and not by the logging system itself.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# LOGGERS ENDPOINT (LoggersEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.loggers.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.loggers.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the loggers endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# REQUEST MAPPING ENDPOINT  (MappingsEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.mappings.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.mappings.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the mappings endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# METRICS ENDPOINT (MetricsEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.metrics.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.metrics.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the metrics endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PROMETHEUS ENDPOINT (PrometheusScrapeEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.prometheus.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.prometheus.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the prometheus endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SCHEDULED TASKS ENDPOINT (ScheduledTasksEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.scheduledtasks.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.scheduledtasks.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the scheduledtasks endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SESSIONS ENDPOINT (SessionsEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.sessions.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the sessions endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SHUTDOWN ENDPOINT (ShutdownEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.shutdown.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable the shutdown endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# THREAD DUMP ENDPOINT (ThreadDumpEndpoint)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.threaddump.cache.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0ms # Maximum time that a response can be cached.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoint.threaddump.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable the threaddump endpoint.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEALTH INDICATORS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.db.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable database health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.cassandra.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Cassandra health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.couchbase.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Couchbase health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.defaults.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable default health indicators.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.diskspace.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable disk space health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.diskspace.path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Path used to compute the available disk space.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.diskspace.threshold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("0 # Minimum disk space, in bytes, that should be available.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.elasticsearch.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Elasticsearch health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.elasticsearch.indices")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Comma-separated index names.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.elasticsearch.response-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("100ms # Time to wait for a response from the cluster.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.influxdb.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable InfluxDB health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.jms.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable JMS health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.ldap.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable LDAP health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.mail.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Mail health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.mongo.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable MongoDB health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.neo4j.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Neo4j health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.rabbit.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable RabbitMQ health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.redis.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Redis health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.solr.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Solr health check.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.status.http-mapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.health.status.order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("DOWN,OUT_OF_SERVICE,UP,UNKNOWN # Comma-separated list of health statuses in order of severity.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HTTP TRACING (HttpTraceProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.trace.http.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable HTTP request-response tracing.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.trace.http.include")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("request-headers,response-headers,cookies,errors # Items to be included in the trace.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# INFO CONTRIBUTORS (InfoContributorProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.info.build.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable build info.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.info.defaults.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable default info contributors.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.info.env.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable environment info.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.info.git.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable git info.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.info.git.mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("simple # Mode to use to expose git information.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# METRICS")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.files.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable files metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.integration.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Spring Integration metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.jvm.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable JVM metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.logback.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable Logback metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.processor.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable processor metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.binders.uptime.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable uptime metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.distribution.percentiles-histogram.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether meter IDs starting-with the specified name should be publish percentile histograms.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.distribution.percentiles.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.distribution.sla.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Specific SLA boundaries for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.enable.*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Whether meter IDs starting-with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.config-refresh-frequency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Frequency for refreshing config settings from the LWC service.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.config-time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("150s # Time to live for subscriptions from the LWC service.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.config-uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:7101/lwc/api/v1/expressions/local-dev # URI for the Atlas LWC endpoint to retrieve current subscriptions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.eval-uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:7101/lwc/api/v1/evaluate # URI for the Atlas LWC endpoint to evaluate the data for a subscription.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.lwc-enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("false # Whether to enable streaming to Atlas LWC.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.meter-time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("15m # Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.atlas.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:7101/api/v1/publish # URI of the Atlas server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.api-key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Datadog API key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.application-key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Datadog application key. Not strictly required, but improves the Datadog experience by sending meter descriptions, types, and base units to Datadog.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.descriptions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.host-tag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('instance # Tag that will be mapped to "host" when shipping metrics to Datadog.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.datadog.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("https://app.datadoghq.com # URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.addressing-mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("multicast # UDP addressing mode, either unicast or multicast.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.duration-units")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("milliseconds # Base time unit used to report durations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to Ganglia is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Host of the Ganglia server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8649 # Port of the Ganglia server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.protocol-version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("3.1 # Ganglia protocol version. Must be either 3.1 or 3.0.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.rate-units")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("seconds # Base time unit used to report rates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.ganglia.time-to-live")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1 # Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.duration-units")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("milliseconds # Base time unit used to report durations.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to Graphite is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Host of the Graphite server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2004 # Port of the Graphite server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("pickled # Protocol to use while shipping data to Graphite.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.rate-units")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("seconds # Base time unit used to report rates.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.graphite.tags-as-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# For the default naming convention, turn the specified tag keys into part of the metric prefix.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.auto-create-db")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to create the Influx database if it does not exist before attempting to publish metrics to it.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.compressed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable GZIP compression of metrics batches published to Influx.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.consistency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("one # Write consistency for each point.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.db")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v('mydb # Tag that will be mapped to "host" when shipping metrics to Influx.')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login password of the Influx server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.retention-policy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:8086 # URI of the Influx server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.influx.user-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Login user of the Influx server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.jmx.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to JMX is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.jmx.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.account-id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# New Relic account ID.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.api-key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# New Relic API key.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.newrelic.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("https://insights-collector.newrelic.com # URI to ship metrics to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.prometheus.descriptions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.prometheus.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to Prometheus is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.prometheus.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.access-token")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# SignalFX access token.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.signalfx.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("https://ingest.signalfx.com # URI to ship metrics to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.simple.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.simple.mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("cumulative # Counting mode.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.simple.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1m # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to StatsD is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.flavor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("datadog # StatsD line protocol to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("localhost # Host of the StatsD server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.max-packet-length")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1400 # Total length of a single payload should be kept within your network's MTU.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.polling-frequency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8125 # Port of the StatsD server to receive exported metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.publish-unchanged-meters")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to send unchanged meters to the StatsD server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.statsd.queue-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2147483647 # Maximum size of the queue of items waiting to be sent to the StatsD server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.api-token")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# API token used when publishing metrics directly to the Wavefront API host.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.batch-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.connect-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Connection timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether exporting of metrics to this backend is enabled.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.global-prefix")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Global prefix to separate metrics originating from this app's white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.num-threads")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2 # Number of threads to use with the metrics publishing scheduler.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.read-timeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Read timeout for requests to this backend.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.step")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("10s # Step size (i.e. reporting frequency) to use.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.export.wavefront.uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("https://longboard.wavefront.com # URI to ship metrics to.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.use-global-registry")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.web.client.max-uri-tags")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("100 # Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.web.client.requests-metric-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http.client.requests # Name of the metric for sent requests.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.web.server.auto-time-requests")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether requests handled by Spring MVC or WebFlux should be automatically timed.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.metrics.web.server.requests-metric-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http.server.requests # Name of the metric for received requests.")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DEVTOOLS PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DEVTOOLS (DevToolsProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.livereload.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable a livereload.com-compatible server.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.livereload.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("35729 # Server port.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.additional-exclude")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional patterns that should be excluded from triggering a full restart.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.additional-paths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Additional paths to watch for changes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable automatic restart.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.exclude")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties # Patterns that should be excluded from triggering a full restart.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.log-condition-evaluation-delta")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to log the condition evaluation delta upon restart.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.poll-interval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("1s # Amount of time to wait between polling for classpath changes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.quiet-period")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("400ms # Amount of quiet time required without any classpath changes before a restart is triggered.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.restart.trigger-file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# Name of a specific file that, when changed, triggers the restart check. If not specified, any classpath file change triggers the restart.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# REMOTE DEVTOOLS (RemoteDevToolsProperties)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.context-path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/.~~spring-boot!~ # Context path used to handle the remote connection.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.proxy.host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The host of the proxy to use to connect to the remote application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.proxy.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# The port of the proxy to use to connect to the remote application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.restart.enabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("true # Whether to enable remote restart.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.secret")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("# A shared secret required to establish a connection (required to enable remote support).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.devtools.remote.secret-header-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("X-AUTH-TOKEN # HTTP header used to transfer the shared secret.")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TESTING PROPERTIES")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ----------------------------------------")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.test.database.replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("any # Type of existing DataSource to replace.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.test.mockmvc.print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("default # MVC Print option.")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);